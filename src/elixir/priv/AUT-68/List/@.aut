--- List/@ AUT-68

module List begin
variable (A : *)
def rec  := (B: list A) { name : B, surname list A }
def list := [List: *] [Cons: A â†’ List â†’ List] [Nil: List] List
def nil  := (List: *) (Cons: A -> List -> List) (Nil: List) Nil
def cons := (Head: A) (Tail: [List: *] [Cons: A -> List -> List] [Nil: List] List)
            (List: *) (Cons: A -> List -> List) (Nil: List) Cons Head (Tail List Cons Nil)
def list (A: U) : U := | nil : list , cons : A -> list -> list |

def fix len (A : U) (acc: N) : (L : list A) -> N
 := case | nil -> Acc , cons x xs -> len A (succ acc) xs |

def list-Lamb (A : U) : U := ( nil : list , cons : A -> list -> list ) 1
def list-Func (A : U) : U := [ nil : list , cons : A -> list -> list ] 1
def list-Pair (A : *) : U := { nil : list , cons : A -> list -> list } 1
def list-Summ (A : U) : U := | nil : list , cons : A -> list -> list | 0

def patient  : list-Alg A := { nil, (x:A,xs:List) cons x xs (list cons nil) }
end
